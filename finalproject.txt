#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#ifdef _WIN32
#define CLEAR "cls"
#else
#define CLEAR "clear"
#endif

// ANSI Color Codes
#define COLOR_RESET   "\033[0m"
#define COLOR_GREEN   "\033[1;32m"
#define COLOR_CYAN    "\033[1;36m"
#define COLOR_YELLOW  "\033[1;33m"
#define COLOR_RED     "\033[1;31m"
#define COLOR_MAGENTA "\033[1;35m"

// Constants
#define MAX_CLASSES 10
#define MAX_STUDENTS 50
#define MAX_SUBJECTS 10
#define NAME_LEN 50
#define FILENAME "gradebook.txt"

// Structs
typedef struct {
    char name[NAME_LEN];
    float grade;
} Subject;

typedef struct {
    char name[NAME_LEN];
    Subject subjects[MAX_SUBJECTS];
    int subjectCount;
} Student;

typedef struct {
    char name[NAME_LEN];
    Student students[MAX_STUDENTS];
    int studentCount;
} Class;

// Globals
Class classes[MAX_CLASSES];
int classCount = 0;

void clearScreen() {
    system(CLEAR);
}

void pause() {
    printf("\nPress Enter to return to menu...");
    getchar(); getchar();
}

// Utility function to safely read a string
void readString(const char *prompt, char *buffer, int length) {
    printf("%s", prompt);
    fgets(buffer, length, stdin);
    buffer[strcspn(buffer, "\n")] = '\0';
}

// Input validation for float
float readGrade() {
    float grade;
    int valid = 0;
    do {
        printf("%sEnter grade (0.0 - 10.0): %s", COLOR_CYAN, COLOR_RESET);
        if (scanf("%f", &grade) == 1 && grade >= 0.0 && grade <= 10.0) {
            valid = 1;
        } else {
            printf("%sInvalid input. Please enter a valid grade between 0.0 and 10.0.%s\n", COLOR_RED, COLOR_RESET);
            while (getchar() != '\n');
        }
    } while (!valid);
    while (getchar() != '\n'); // clear buffer
    return grade;
}

// Load
void loadFromFile() {
    FILE *file = fopen(FILENAME, "r");
    if (!file) return;

    fscanf(file, "%d\n", &classCount);
    for (int i = 0; i < classCount; i++) {
        fscanf(file, "%s %d\n", classes[i].name, &classes[i].studentCount);
        for (int j = 0; j < classes[i].studentCount; j++) {
            fscanf(file, "%s %d\n", classes[i].students[j].name, &classes[i].students[j].subjectCount);
            for (int k = 0; k < classes[i].students[j].subjectCount; k++) {
                fscanf(file, "%s %f\n", classes[i].students[j].subjects[k].name, &classes[i].students[j].subjects[k].grade);
            }
        }
    }
    fclose(file);
}

// Save
void saveToFile() {
    FILE *file = fopen(FILENAME, "w");
    if (!file) return;

    fprintf(file, "%d\n", classCount);
    for (int i = 0; i < classCount; i++) {
        fprintf(file, "%s %d\n", classes[i].name, classes[i].studentCount);
        for (int j = 0; j < classes[i].studentCount; j++) {
            fprintf(file, "%s %d\n", classes[i].students[j].name, classes[i].students[j].subjectCount);
            for (int k = 0; k < classes[i].students[j].subjectCount; k++) {
                fprintf(file, "%s %.2f\n", classes[i].students[j].subjects[k].name, classes[i].students[j].subjects[k].grade);
            }
        }
    }
    fclose(file);
}

void addGrade() {
    clearScreen();
    char className[NAME_LEN], studentName[NAME_LEN], subjectName[NAME_LEN];
    float grade;

    printf("%s=== Add Grade ===%s\n", COLOR_YELLOW, COLOR_RESET);
    readString("Enter class name: ", className, NAME_LEN);
    readString("Enter student name: ", studentName, NAME_LEN);
    readString("Enter subject name: ", subjectName, NAME_LEN);
    grade = readGrade();

    int ci = -1;
    for (int i = 0; i < classCount; i++) {
        if (strcmp(classes[i].name, className) == 0) {
            ci = i;
            break;
        }
    }
    if (ci == -1 && classCount < MAX_CLASSES) {
        ci = classCount++;
        strcpy(classes[ci].name, className);
        classes[ci].studentCount = 0;
    }

    int si = -1;
    for (int i = 0; i < classes[ci].studentCount; i++) {
        if (strcmp(classes[ci].students[i].name, studentName) == 0) {
            si = i;
            break;
        }
    }
    if (si == -1 && classes[ci].studentCount < MAX_STUDENTS) {
        si = classes[ci].studentCount++;
        strcpy(classes[ci].students[si].name, studentName);
        classes[ci].students[si].subjectCount = 0;
    }

    Student *s = &classes[ci].students[si];
    if (s->subjectCount < MAX_SUBJECTS) {
        strcpy(s->subjects[s->subjectCount].name, subjectName);
        s->subjects[s->subjectCount].grade = grade;
        s->subjectCount++;
        printf("%sGrade added successfully!%s\n", COLOR_GREEN, COLOR_RESET);
    } else {
        printf("%sCannot add more subjects for this student.%s\n", COLOR_RED, COLOR_RESET);
    }

    pause();
}

void viewStatistics() {
    clearScreen();
    printf("%s=== View Statistics ===%s\n", COLOR_YELLOW, COLOR_RESET);
    printf("1. Top Students by Average Grade\n");
    printf("2. Best Student in Each Class\n");
    printf("3. Average Grade per Class\n");
    printf("Select an option: ");

    int choice;
    scanf("%d", &choice);
    getchar(); // consume newline

    clearScreen();
    switch (choice) {
        case 1:
            printf("%sTop Students by Average Grade:%s\n", COLOR_CYAN, COLOR_RESET);
            for (int i = 0; i < classCount; i++) {
                for (int j = 0; j < classes[i].studentCount; j++) {
                    Student *s = &classes[i].students[j];
                    float total = 0;
                    for (int k = 0; k < s->subjectCount; k++) total += s->subjects[k].grade;
                    float avg = s->subjectCount ? total / s->subjectCount : 0;
                    printf("%s%s%s (%sClass %s%s): Avg = %.2f\n", COLOR_GREEN, s->name, COLOR_RESET, COLOR_MAGENTA, classes[i].name, COLOR_RESET, avg);
                }
            }
            break;

        case 2:
            printf("%sBest Student in Each Class:%s\n", COLOR_CYAN, COLOR_RESET);
            for (int i = 0; i < classCount; i++) {
                float topAvg = -1;
                char topStudent[NAME_LEN] = "";
                for (int j = 0; j < classes[i].studentCount; j++) {
                    Student *s = &classes[i].students[j];
                    float total = 0;
                    for (int k = 0; k < s->subjectCount; k++) total += s->subjects[k].grade;
                    float avg = s->subjectCount ? total / s->subjectCount : 0;
                    if (avg > topAvg) {
                        topAvg = avg;
                        strcpy(topStudent, s->name);
                    }
                }
                printf("Class %s%s%s: %s%s%s (%.2f)\n", COLOR_MAGENTA, classes[i].name, COLOR_RESET, COLOR_GREEN, topStudent, COLOR_RESET, topAvg);
            }
            break;

        case 3:
            printf("%sAverage Grade per Class:%s\n", COLOR_CYAN, COLOR_RESET);
            for (int i = 0; i < classCount; i++) {
                float total = 0;
                int count = 0;
                for (int j = 0; j < classes[i].studentCount; j++) {
                    for (int k = 0; k < classes[i].students[j].subjectCount; k++) {
                        total += classes[i].students[j].subjects[k].grade;
                        count++;
                    }
                }
                float avg = count ? total / count : 0;
                printf("Class %s%s%s: Average = %.2f\n", COLOR_MAGENTA, classes[i].name, COLOR_RESET, avg);
            }
            break;

        default:
            printf("%sInvalid option.%s\n", COLOR_RED, COLOR_RESET);
    }
    pause();
}

void showMainMenu() {
    clearScreen();
    printf("%s==== Gradebook System ====%s\n", COLOR_YELLOW, COLOR_RESET);
    printf("1. Add Grade\n");
    printf("2. View Statistics\n");
    printf("3. Exit\n");
    printf("Select an option: ");
}

int main() {
    loadFromFile();
    int choice;

    while (1) {
        showMainMenu();
        if (scanf("%d", &choice) != 1) {
            while (getchar() != '\n');
            printf("%sInvalid input. Please enter a number.%s\n", COLOR_RED, COLOR_RESET);
            continue;
        }
        getchar(); // flush newline

        switch (choice) {
            case 1: addGrade(); break;
            case 2: viewStatistics(); break;
            case 3: saveToFile(); clearScreen(); printf("%sExiting...%s\n", COLOR_YELLOW, COLOR_RESET); return 0;
            default: printf("%sInvalid option. Try again.%s\n", COLOR_RED, COLOR_RESET); pause(); break;
        }
    }
    return 0;
}
